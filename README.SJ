MODAL PROCESS
Create the MODAL from "Login/Register" on the HEADER
import the MODAL to be displayed:
import Modal from "../components/Modal";
Within the HeaderDisplay the clickable link: onClick={() => {
                  setModalIsOpen(true);
Once ../components/Modal is displayed 
Add the onClick for the other Modal



//rfce function
//rafce arrow function
lsof -ti:3000 | xargs kill
https://www.youtube.com/watch?v=wce7_XYWpPk
MODAL: https://www.youtube.com/watch?v=f6B_rIoX0Lw
https://www.youtube.com/watch?v=nwJK-jo91vA
    https://www.youtube.com/watch?v=VURZvau80Jo
    
REGISTER: https://www.youtube.com/watch?v=bLlDwkOyI5c&t=479s

Mongoose: https://www.youtube.com/watch?v=_nSi629qvpY
GITHUB: https://github.com/ghulamabbas2/buyitnow/tree/002-dbconnect-new-product
Coding with Abbas
https://github.com/ghulamabbas2/buyitnow/blob/003-products-homepage/next.config.js
NEXTJS 13 Pages layout:https://www.youtube.com/watch?v=H8W2YOwHSnE

START: HEADER:
https://www.youtube.com/watch?v=DF68MNDxVwU


USE dt-testing 3: Documents/SI/dt-testing 3/app/users

OTHER CONFIG:
/Users/stephenjohann/Downloads/code-3-5-13 2/next.config.js

PASSWORDLESS
https://www.youtube.com/watch?v=61sMBUOUVww
CREDENTIALS
https://www.youtube.com/watch?v=bLlDwkOyI5c&t=469s
https://github.com/ghulamabbas2/next-auth-13/tree/with-credentials

SONNY:
https://github.com/sonnysangha/Amazon-starter-template-nextjs


ROLE BASED
https://www.youtube.com/watch?v=xJ6efexXJ7I

Car rental
https://github.com/cuunoong/car-rental
Awesome: https://www.youtube.com/watch?v=l0kHyQBs69M

jsconfig.json 27:40
Dashboard
layout.jsx
page.jsx => <UserList />
users.jsx - users list from MongoDB
    . import { getUsers } from '../../lib/prisma/users'
    . const { users } = await getUsers()
    . map

Empty Function:
<input type="checkbox" onChange={() => {}}/>


HELPFUL:
Start: https://www.youtube.com/watch?v=IcexKbnTEAM&t=631s
https://app-dir.vercel.app/
https://beta.nextjs.org/docs/data-fetching/mutating

TELERIK: 
https://docs.telerik.com/teststudio-apis/features/steps/http-request

MongoDB Link:
mongodb+srv://peak5:peak5@peak5energy.mh5dm.mongodb.net/peak5energy?retryWrites=true&w=majority
mongodb+srv://peak5:peak5@peak5energy.mh5dm.mongodb.net/registration?retryWrites=true&w=majority
Querying the DB:
https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb/querying-the-database-typescript-mongodb#write-data-into-the-database
MongoDB Link:
mongodb+srv://peak5:peak5@peak5energy.mh5dm.mongodb.net/peak5energy?retryWrites=true&w=majority
mongodb+srv://peak5:peak5@peak5energy.mh5dm.mongodb.net/registration?retryWrites=true&w=majority
Querying the DB:
https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb/querying-the-database-typescript-mongodb#write-data-into-the-database

DEMO: 
https://www.youtube.com/watch?v=__mSgDEOyv8&t=471s
https://github.com/fireship-io/next13-pocketbase-demo

PRISMA COMMANDS:
npx prisma db push
npx prisma studio

npm i --save-dev prisma@latest                       │
npm i @prisma/client@latest   

INSTALL PRISMA:
npm i -D prisma
npx prisma init
npm install @prisma/client
npx prisma generate

npm install @heroicons/react

npm i --save-dev prisma@latest  
 npm i @prisma/client@latest 

npm run build
OTHER:
https://www.youtube.com/watch?v=Y2e1m585hCk
https://www.youtube.com/watch?v=Y2e1m585hCk

WORKS:
{
    "name": "Sultan Jinnah",
    "email": "sjinnah@it.ucla.edu",
    "imageUrl": "/images/ucla.jpeg",
      "tweets": {
        "createMany": {
            "data": [
                {"body":"Sultan Testing", "likes": 100 },
                {"body":"DT Technology Testing", "likes": 100 },
                {"body":"Subscribe if you have not already :)", "likes": 100 }
            ]
        }
    }
}


{
    "name": "Julia Sakowski",
    "email": "jsakowski@it.ucla.edu",
    "imageUrl": "/images/main.jpeg",
      "tweets": {
        "createMany": {
            "data": [
                {"body":"Julia testing", "likes": 50 },
                {"body":"DT Technology Testing", "likes": 88 },
                {"body":"Subscribe if you have not already :)", "likes": 90 }
            ]
        }
    }
}

{
    "name": "Naveen Chinthapally",
    "email": "nchinthapally@it.ucla.edu",
    "imageUrl": "/images/script.jpeg",
      "tweets": {
        "createMany": {
            "data": [
                {"body":"Naveen testing", "likes": 77 },
                {"body":"DT Technology Testing", "likes": 100 },
                {"body":"Subscribe if you have not already :)", "likes": 56 }
            ]
        }
    }
}

{
    "name": "Charles Paucar",
    "email": "cpaucar@it.ucla.edu",
    "imageUrl": "/images/under.jpeg",
      "tweets": {
        "createMany": {
            "data": [
                {"body":"Charles testing", "likes": 99 },
                {"body":"DT Technology remote testing", "likes": 89 },
                {"body":"Subscribe if you have not already :)", "likes": 96 }
            ]
        }
    }
}





{
    "name": "Gevorg Ter-Petrosyan",
    "email": "gterpetrosyan@it.ucla.edu",
    "imageUrl": "/images/ucla1.jpeg",
      "tweets": {
        "createMany": {
            "data": [
                {"body":"Gevorg testing from Germany", "likes": 100 },
                {"body":"DT Technology Testing", "likes": 100 },
                {"body":"Subscribe if you have not already :)", "likes": 100 }
            ]
        }
    }
}


{
    "name": "Stephen Johann",
    "email": "sjohann@it.ucla.edu",
    "imageUrl": "/images/ucla.jpeg",
      "tweets": {
        "createMany": {
            "data": [
                {"body":"Steve Testing", "likes": 100 },
                {"body":"DT Technology Testing", "likes": 100 },
                {"body":"Subscribe if you have not already :)", "likes": 100 }
            ]
        }
    }
}
Sultan Jinnah  sjinnah@it.ucla.edu
Julia Sakowski jsakowski@it.ucla.edu
Naveen Chinthapally nchinthapally@it.ucla.edu
Charles Paucar cpaucar@it.ucla.edu
Gevorg Ter-Petrosyan gterpetrosyan@it.ucla.edu
Stephen Johann  sjohann@it.ucla.edu

Code snippets:
App.jsx https://www.youtube.com/watch?v=QuLfCUh-iwI&t=319
import React { useState } from 'react'
const EmailField = () => {
    const [email, setEmail] = use State('')
    return (
        <input type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        />
    )
}

function App() {
    const [setEmail, setSendEmail] = useState(false)

    return (
        <div>
        <div>
        <label>
        <imput type="checkbox"
        checked={sendEmail}
        onChange={(e) => setSendEmail(e.target.checked)}
        />
        Send me emails
        </label>
        </div>
        {sendEmail && <EmailField />}
        </div>
    )
}

export default App
//{} Object destructing

//Typescript .ts
//cmd k and cmd i
//export default ...
//npx ts-node functions-test.ts
//https://www.youtube.com/watch?v=-TsIUuA3yyE

//npx tsc functons.js
//Typescript <EmailField /> babel will take and copile this: {React.createElement(EmailField, null)}
//you do not send jsx to browser - you send javascript (1995) to the browser
//TRANSPILE BABEL TypeScript (2012) compiles to JavaScript which the browser understands: 
//TypeScript extends Javascript and is better than JavaScript in terms of 
//language features, reference validation, project scalability, collaboration within and between teams, developer experience, and code maintainability.
//TypeScript provides “type safety” (hence the name!) to JavaScript.
//
//to javascript: JavaScript is a server-side programming 
//language that helps to develop interactive web pages. handle mouse and keyboard events, validate forms, and so on. With time, the language evolved. You can now use JavaScript to 
//build websites and apps for any platform.
//Typescript code needs to be compiled while JavaScript code doesn’t need to compile.
//Typescript uses concepts like types and interfaces to describe data being used whereas JavaScript has no such concept.
//Typescript runs on Node js or any browser which supports ECMAScript 3 
//typescript provides:  static typing, classes, and interface.
//
//Double equals (==) is a comparison operator, which transforms the operands having the same type before comparison.
//=== (Triple equals) is a strict equality comparison operator in JavaScript, which returns false for the values which are not of a similar type.
//= JavaScript operator assigns a value to the left operand depends on the value of operand available on the right side.
//
//Typescript: https://www.youtube.com/watch?v=-TsIUuA3yyE
//export const fetchData = (url: string): Promise<string> => 
    //Promise.resolve(`Data from ${url}`)


    //SEARCH https://www.youtube.com/watch?v=RAJD4KpX8LA
    2:50 and 13:58

    Setup Mongo database
    https://www.youtube.com/watch?v=_ayP3rSec54

    yarn init -y OR npm init -y

